require('dotenv').config({ silent: true });
require('../src/globals');
const express = require('express');
const bodyParser = require('body-parser');
const { blockchain, getBalance } = require('../src/blockchain/blockchain');
const { connectToPeers, broadcastTransaction } = require('../src/middleware/socket');
const Server = require('./socket');
const Wallet = require('../src/wallet/wallet');
const { transactions, addTransactionToPool } = require('../src/wallet/transactions');

const HTTP_PORT = 3005;

const app = express();

app.use(bodyParser.json());

const wallet = new Wallet('i am the first leader');

connectToPeers(blockchain);

app.get('/ico/transactions', (req, res) => {
  console.log(transactions);
  res.json(transactions);
});

app.get('/ico/blocks', (req, res) => {
  res.json(blockchain.blocks);
});

app.post('/ico/transaction', (req, res) => {
  const { to, amount, instructions } = req.body;
  const from = wallet.getPublicKey(wallet);

  if (!to || !amount || !instructions)
    return res.json({ success: false, message: 'Missing required fields' }).status(400);

  if (instructions != 'transfer' && instructions != 'stake')
    return res.json({ success: false, message: 'Invalid transaction type' }).status(400);

  const { success, message, transaction } = wallet.createTransaction(to, from, amount, instructions);

  if (!success) return res.json({ success, message: message }).status(400);

  // Add transaction to the pool
  addTransactionToPool(transaction);
  broadcastTransaction(transaction);

  res.redirect('/ico/transactions');
});

app.get('/ico/address', (req, res) => {
  res.json({ address: wallet.address });
});

app.get('/ico/balance', (req, res) => {
  res.json({ balance: getBalance(wallet.publicKey) });
});

app.post('/ico/balance-of', (req, res) => {
  res.json({ balance: getBalance(req.body.address) });
});

app.listen(HTTP_PORT, () => {
  log.info(`Listening on port ${HTTP_PORT}`);
});

// Initialize WebSocket server
new Server(blockchain, transactions, wallet);
